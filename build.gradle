defaultTasks 'clean', 'build', 'sonar'
buildscript {
    repositories {
        mavenCentral()
        maven {
            url "${artifactoryUrl}/maven-repos"
            credentials {
                username System.getenv("ARTIFACTORY_USERNAME") ?: "$artifactory_username"
                password System.getenv("ARTIFACTORY_PASSWORD") ?: "$artifactory_password"
            }
        }
        ivy {
            layout "maven"
            url "${artifactoryUrl}/local-non-prod"
            credentials {
                username System.getenv("ARTIFACTORY_USERNAME") ?: "$artifactory_username"
                password System.getenv("ARTIFACTORY_PASSWORD") ?: "$artifactory_password"
            }
        }
        ivy {
            layout "maven"
            url "${artifactoryUrl}/maven-repos"
            credentials {
                username System.getenv("ARTIFACTORY_USERNAME") ?: "$artifactory_username"
                password System.getenv("ARTIFACTORY_PASSWORD") ?: "$artifactory_password"
            }
        }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarqubeGradlePluginVersion}"
        classpath "com.test.pipes.gradle:buildaudit-gradle-plugin:+"
    }
}

apply plugin: "java"
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "jacoco"
apply from: "sonar.gradle"
apply plugin: 'org.sonarqube'
apply from: 'gradle/checkstyle.gradle'

group = "com.test.customer.offers"

java {
    sourceCompatibility = 21
    targetCompatibility = 21
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

repositories {
    maven {
        url "${artifactoryUrl}/maven-repos"
        credentials {
            username System.getenv("ARTIFACTORY_USERNAME") ?: "$artifactory_username"
            password System.getenv("ARTIFACTORY_PASSWORD") ?: "$artifactory_password"
        }
    }
}


dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'
    //overriding actual security crypto version which is 6.4.2
    implementation "org.springframework.security:spring-security-crypto:6.4.4"
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    //overriding the version to 3.4.5 as the earlier version has vulnerability
    implementation 'org.springframework.boot:spring-boot:3.4.5'
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.postgresql:postgresql'
    implementation "io.micrometer:micrometer-tracing-bridge-brave"
    implementation 'redis.clients:jedis:5.2.0'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    //overriding actual netty handler version which is 4.1.117.Final
    implementation 'io.netty:netty-handler:4.1.118.Final'
    implementation 'com.test.customer.offers:customer-offers-commons:3.0.1'
    //overriding actual tomcat version which is 10.1.34
    implementation 'org.apache.tomcat.embed:tomcat-embed-core:10.1.42'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql:42.7.7'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    //overriding actual json-smart version under starter-test which is 2.5.1
    testImplementation "net.minidev:json-smart:2.5.2"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.mockito:mockito-junit-jupiter"
    testImplementation 'org.projectlombok:lombok'
    testCompileOnly 'junit:junit'
    testImplementation 'au.com.dius:pact-jvm-provider-spring:4.0.10'
    testAnnotationProcessor 'org.projectlombok:lombok'
}


dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

jacoco {
    toolVersion = "${jacocoToolVersion}"
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
    dependsOn test
}


def startStubby = tasks.register('startStubby') {
    exec {
        println 'Starting Stubs'
        commandLine 'sh', 'stubs/startStubby.sh'
    }
}

test {
    dependsOn startStubby
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    doLast {
        exec {
            commandLine 'sh', 'stubs/stopStubby.sh'
            println 'Killed Stubs'
        }
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

sourceSets {
    test {
        java.srcDirs = [file('src/test/unit/java'), file('src/test/functional/java')]
        resources.srcDirs = [file('src/test/unit/resources'), file('src/test/functional/resources')]
    }
}
